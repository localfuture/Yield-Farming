/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  YieldFarming,
  YieldFarmingInterface,
} from "../../contracts/YieldFarming";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "yieldPercent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minDeposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardTime",
        type: "uint256",
      },
    ],
    name: "addPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "checkClaimableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "checkPoolDetails",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "checkRemainingCapacity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "checkUserDepositInPool",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "checkUserDeposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checkWhaleWallets",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
    ],
    name: "depositWei",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawWei",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001203380380620012038339810160408190526200003491620002d6565b82826003620000448382620003ea565b506004620000538282620003ea565b5050600580546001600160a01b031916339081179091556200009391506200008060ff8416600a620005cb565b6200008d906064620005e0565b6200009c565b50505062000610565b6001600160a01b038216620000cc5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000da60008383620000de565b5050565b6001600160a01b0383166200010d578060026000828254620001019190620005fa565b90915550620001819050565b6001600160a01b03831660009081526020819052604090205481811015620001625760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c3565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019f57600280548290039055620001be565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020491815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023957600080fd5b81516001600160401b038082111562000256576200025662000211565b604051601f8301601f19908116603f0116810190828211818310171562000281576200028162000211565b816040528381526020925086838588010111156200029e57600080fd5b600091505b83821015620002c25785820183015181830184015290820190620002a3565b600093810190920192909252949350505050565b600080600060608486031215620002ec57600080fd5b83516001600160401b03808211156200030457600080fd5b620003128783880162000227565b945060208601519150808211156200032957600080fd5b50620003388682870162000227565b925050604084015160ff811681146200035057600080fd5b809150509250925092565b600181811c908216806200037057607f821691505b6020821081036200039157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e557600081815260208120601f850160051c81016020861015620003c05750805b601f850160051c820191505b81811015620003e157828155600101620003cc565b5050505b505050565b81516001600160401b0381111562000406576200040662000211565b6200041e816200041784546200035b565b8462000397565b602080601f8311600181146200045657600084156200043d5750858301515b600019600386901b1c1916600185901b178555620003e1565b600085815260208120601f198616915b82811015620004875788860151825594840194600190910190840162000466565b5085821015620004a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200050d578160001904821115620004f157620004f1620004b6565b80851615620004ff57918102915b93841c9390800290620004d1565b509250929050565b6000826200052657506001620005c5565b816200053557506000620005c5565b81600181146200054e5760028114620005595762000579565b6001915050620005c5565b60ff8411156200056d576200056d620004b6565b50506001821b620005c5565b5060208310610133831016604e8410600b84101617156200059e575081810a620005c5565b620005aa8383620004cc565b8060001904821115620005c157620005c1620004b6565b0290505b92915050565b6000620005d9838362000515565b9392505050565b8082028115828204841417620005c557620005c5620004b6565b80820180821115620005c557620005c5620004b6565b610be380620006206000396000f3fe60806040526004361061015f5760003560e01c806395d89b41116100c0578063c94c178b11610074578063dd62ed3e11610059578063dd62ed3e146103f7578063e0ebf61a1461043d578063f3bc21b91461043d57600080fd5b8063c94c178b146103aa578063ca593db0146103db57600080fd5b8063a8376b3c116100a5578063a8376b3c1461034b578063a9059cbb1461036a578063b7c7c4e01461038a57600080fd5b806395d89b4114610328578063a3f81da01461033d57600080fd5b8063313ce5671161011757806370a08231116100fc57806370a08231146102725780638da5cb5b146102a85780638fb0a9f4146102e057600080fd5b8063313ce5671461021e57806331d982371461023a57600080fd5b80630962ef79116101485780630962ef79146101bf57806318160ddd146101df57806323b872dd146101fe57600080fd5b806306fdde0314610164578063095ea7b31461018f575b600080fd5b34801561017057600080fd5b5061017961045e565b604051610186919061093b565b60405180910390f35b34801561019b57600080fd5b506101af6101aa3660046109a5565b6104f0565b6040519015158152602001610186565b3480156101cb57600080fd5b506101dd6101da3660046109cf565b50565b005b3480156101eb57600080fd5b506002545b604051908152602001610186565b34801561020a57600080fd5b506101af6102193660046109e8565b61050a565b34801561022a57600080fd5b5060405160128152602001610186565b34801561024657600080fd5b5061025d610255366004610a24565b600080915091565b60408051928352602083019190915201610186565b34801561027e57600080fd5b506101f061028d366004610a24565b6001600160a01b031660009081526020819052604090205490565b3480156102b457600080fd5b506005546102c8906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b3480156102ec57600080fd5b506103086102fb3660046109cf565b6000806000809193509193565b604080519485526020850193909352918301526060820152608001610186565b34801561033457600080fd5b5061017961052e565b6101dd6101da3660046109cf565b34801561035757600080fd5b506101dd610366366004610a46565b5050565b34801561037657600080fd5b506101af6103853660046109a5565b61053d565b34801561039657600080fd5b506101dd6103a5366004610a68565b61054b565b3480156103b657600080fd5b506103cd6103c53660046109cf565b606080915091565b604051610186929190610ade565b3480156103e757600080fd5b5060606040516101869190610b35565b34801561040357600080fd5b506101f0610412366004610b48565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561044957600080fd5b506101f06104583660046109cf565b50600090565b60606003805461046d90610b7b565b80601f016020809104026020016040519081016040528092919081815260200182805461049990610b7b565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b5050505050905090565b6000336104fe81858561064d565b60019150505b92915050565b60003361051885828561065f565b6105238585856106dd565b506001949350505050565b60606004805461046d90610b7b565b6000336104fe8185856106dd565b6005546001600160a01b031633146105b45760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b8382106106035760405162461bcd60e51b815260206004820152601b60248201527f6d696e2073686f756c64206265206c657373207468616e206d6178000000000060448201526064016105ab565b604080516080810182529485526020808601948552858201938452606086019283526006546000908152600790915220935184559151600184015551600283015551600390910155565b61065a838383600161073c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146106d757818110156106c857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016105ab565b6106d78484848403600061073c565b50505050565b6001600160a01b03831661070757604051634b637e8f60e11b8152600060048201526024016105ab565b6001600160a01b0382166107315760405163ec442f0560e01b8152600060048201526024016105ab565b61065a838383610811565b6001600160a01b0384166107665760405163e602df0560e01b8152600060048201526024016105ab565b6001600160a01b03831661079057604051634a1406b160e11b8152600060048201526024016105ab565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156106d757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161080391815260200190565b60405180910390a350505050565b6001600160a01b03831661083c5780600260008282546108319190610bb5565b909155506108ae9050565b6001600160a01b0383166000908152602081905260409020548181101561088f5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016105ab565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166108ca576002805482900390556108e9565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161092e91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156109685785810183015185820160400152820161094c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109a057600080fd5b919050565b600080604083850312156109b857600080fd5b6109c183610989565b946020939093013593505050565b6000602082840312156109e157600080fd5b5035919050565b6000806000606084860312156109fd57600080fd5b610a0684610989565b9250610a1460208501610989565b9150604084013590509250925092565b600060208284031215610a3657600080fd5b610a3f82610989565b9392505050565b60008060408385031215610a5957600080fd5b50508035926020909101359150565b60008060008060808587031215610a7e57600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501945080840160005b83811015610ad35781516001600160a01b031687529582019590820190600101610aae565b509495945050505050565b604081526000610af16040830185610a9a565b82810360208481019190915284518083528582019282019060005b81811015610b2857845183529383019391830191600101610b0c565b5090979650505050505050565b602081526000610a3f6020830184610a9a565b60008060408385031215610b5b57600080fd5b610b6483610989565b9150610b7260208401610989565b90509250929050565b600181811c90821680610b8f57607f821691505b602082108103610baf57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561050457634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a";

type YieldFarmingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldFarmingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldFarming__factory extends ContractFactory {
  constructor(...args: YieldFarmingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimals, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimals, overrides || {}) as Promise<
      YieldFarming & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): YieldFarming__factory {
    return super.connect(runner) as YieldFarming__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldFarmingInterface {
    return new Interface(_abi) as YieldFarmingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): YieldFarming {
    return new Contract(address, _abi, runner) as unknown as YieldFarming;
  }
}
